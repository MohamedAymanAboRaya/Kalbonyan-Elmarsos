## The Complete Node.js Developer Course (3rd Edition)


## MongoDB and Promises (Task App)

### MongoDB and NoSQL Databases

| SQL(Structure Query Language) | NoSQL (Not Only SQL) |
| ----------------------------- | -------------------- |
| Database                      | Database             |
| Table                         | Collection           |
| Row / Record                  | Document             |
| Column                        | Field                |



### Installing MongoDB on macOS and Linux

[mongodb](https://www.mongodb.com/try/download/community)

user directory

- mongodb (app)
- mongodb-data

```console
<!-- run mondodb -->
cd ~
pwd
/Users/chesterheng/mongodb/bin/mongod --dbpath=/Users/chesterheng/mongodb-data
```


### Installing Database GUI Viewer

[Download Robo 3T](https://robomongo.org/download)

Right click connection > Open Shell

```console
db.version()
```


### Connecting and Inserting Documents

- [MongoDB Node.JS Driver](https://mongodb.github.io/node-mongodb-native/)
- [MongoDB Node.JS Driver Github](https://github.com/mongodb/node-mongodb-native)

```javascript
// CRUD create read update delete
const MongoClient = require('mongodb').MongoClient;
const connectionURL = 'mongodb://127.0.0.1:27017'
const databaseName = 'task-manager'
MongoClient.connect(connectionURL, {
  useNewUrlParser: true,   
  useUnifiedTopology: true 
},
(error, client) => {
  if (error) {
    return console.log('Unable to connect to database!')
  }
  const db = client.db(databaseName)
  db.collection('users').insertOne({
    name: 'Andrew',
    age: 27
  })
})
```


### Inserting Documents

```javascript
  db.collection('users').insertOne({
    name: 'Andrew',
    age: 27
  }, (error, result) => {
    if (error) {
      return console.log('Unable to insert user')
    }
    console.log(result.ops)
  })
  db.collection('users').insertMany([
    {
      name: 'Jen',
      age: 28
    }, {
      name: 'Gunther',
      age: 27
  }], (error, result) => {
    if (error) {
      return console.log('Unable to insert documents!')
    }
    console.log(result.ops)
  })
```


### The ObjectID

```javascript
const id = new ObjectID()
// <Buffer 5e e2 a3 3f be d3 08 11 82 e8 22 7d>
console.log(id.id)
console.log(id.id.length)
// 5ee2a33fbed3081182e8227d
console.log(id.toHexString())
console.log(id.toHexString().length)
```


### Querying Documents

```javascript
  db.collection('users')
    .findOne({ _id: new ObjectID("5ee24aeb128f4d0ade868959") }
    , (error, user) => {
      if (error) {
        return console.log('Unable to fetch')
      }
      console.log(user)
    })
  db.collection('users')
    .find({ age: 27 })
    .toArray((error, user) => {
      if (error) {
        return console.log('Unable to fetch')
      }
      console.log(user)
    })
```

### Promises

```javascript
const doWorkPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve([7, 4, 1])
    // reject('Things went wrong!')
  }, 2000)
})
doWorkPromise.then(result => {
  console.log('Success!', result)
}).catch((error) => {
  console.log('Error!', error)
})
//
//                               fulfilled
//                              /
// Promise      -- pending --> 
//                              \
//                               rejected
//
```


### Updating Documents

```javascript
  db.collection('users')
    .updateOne({ _id: new ObjectID("5ee24aeb128f4d0ade868959") }, { $inc: { age: 1 } })
    .then(result => console.log(result.modifiedCount))
    .catch(error => console.log(error))
  db.collection('tasks')
    .updateMany({ completed: false }, { $set: { completed: true } })
    .then(result => console.log(result.modifiedCount))
    .catch(error => console.log(error))
```


### Deleting Documents

```javascript
db.collection('users')
  .deleteMany({ age: 27 })
  .then(result => console.log(result))
  .catch(error => console.log(error))
db.collection('tasks')
  .deleteOne({ description: "Clean the house" })
  .then(result => console.log(result))
  .catch(error => console.log(error))
```

