## The Complete Node.js Developer Course (3rd Edition)


## **Section 8: Accessing API from Browser (Weather App)**

### The Query String

```javascript
// app.js
...
app.get('/weather', (req, res) => {
  if (!req.query.address) {
    return res.send({
      error: 'You must provide an address!'
    })
  }
  
  res.send({
    forecast: 'It is sunny',
    location: 'Singapore',
    address: req.query.address
  })
})
app.get('/products', (req, res) => {
  if (!req.query.search) {
    return res.send({
      error: 'You must provide a search term'
    })
  }
  
  res.send({
    products: []
  })
})
```

Chrome Browser

- http://localhost:3000/weather?address=Singapore
- http://localhost:3000/products?search=games



### Building a JSON HTTP Endpoint

```javascript
// app.js
...
app.get('/weather', (req, res) => {
  if (!req.query.address) {
    return res.send({
      error: 'You must provide an address!'
    })
  }
  
  geocode(req.query.address, (error, { latitude, longitude, location }) => {
    if (error) {
      return res.send({ error })
    }
    forecast(latitude, longitude, (error, forecastData) => {
      if (error) {
        return res.send({ error })
      }
      res.send({
        forecast: forecastData,
        location,
        address: req.query.address
      })
    })
  })
})
```



### ES6 Aside: Default Function Parameters

```javascript
// app.js
geocode(req.query.address, (error, { latitude, longitude, location } = {}) => {
    ...
  })
})
```



### Browser HTTP Requests with Fetch

web-server

- public (exposed by the web server)
  - css
  - img
  - js (make http request from frontend)
- src
- templates (contains .hbs files)
  - partials
  - views

```hbs
<!DOCTYPE html>
<html>
<head>
  <title>Weather</title>
  <link rel="icon" href="/img/weather.png">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="/js/app.js"></script>
</head>
<body>
  <div class="main-content">
    {{>header}}
    <p>Use this site to get your weather!</p>
  </div>
  
  {{>footer}}
</body>
</html> 
```

```javascript
// public/js/app.js
console.log('Client side javascript file is loaded!')
fetch('http://localhost:3000/weather?address=!').then(response => {
  response.json().then((data) => {
    if (data.error) {
      console.log(data.error)
    } else {
      console.log(data.location)
      console.log(data.forecast)
    }
  })
})
```



### Creating a Search Form

```hbs
<!-- index.hbs -->
<!DOCTYPE html>
<html>
<head>
  <title>Weather</title>
  <link rel="icon" href="/img/weather.png">
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="main-content">
    {{>header}}
    <p>Use this site to get your weather!</p>
    <form>
      <input placeholder="Location">
      <button>Search</button>
    </form>
  </div>
  
  {{>footer}}
  <script src="/js/app.js"></script>
</body>
</html> 
```

```javascript
// public/js/app.js
console.log('Client side javascript file is loaded!')
const weatherForm = document.querySelector('form')
const search = document.querySelector('input')
weatherForm.addEventListener('submit', event => {
  event.preventDefault()
  const location = search.value
  fetch(`http://localhost:3000/weather?address=${location}`)
    .then(response => {
      response.json().then((data) => {
        if (data.error) {
          console.log(data.error)
        } else {
          console.log(data.location)
          console.log(data.forecast)
        }
      })
    })
})
```


### Wiring up the User Interface

```javascript
// public/js/app.js
console.log('Client side javascript file is loaded!')
const weatherForm = document.querySelector('form')
const search = document.querySelector('input')
const messageOne = document.querySelector('#message-1')
const messageTwo = document.querySelector('#message-2')
weatherForm.addEventListener('submit', event => {
  event.preventDefault()
  const location = search.value
  messageOne.textContent = 'Loading...'
  messageTwo.textContent = ''
  fetch(`http://localhost:3000/weather?address=${location}`)
    .then(response => {
      response.json().then((data) => {
        if (data.error) {
          messageOne.textContent = data.error
        } else {
          messageOne.textContent = data.location
          messageTwo.textContent = data.forecast
        }
      })
    })
})
```

```hbs
<!DOCTYPE html>
<html>
<head>
  <title>Weather</title>
  <link rel="icon" href="/img/weather.png">
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="main-content">
    {{>header}}
    <p>Use this site to get your weather!</p>
    <form>
      <input placeholder="Location">
      <button>Search</button>
    </form>
    <p id="message-1"></p>
    <p id="message-2"></p>
  </div>
  
  {{>footer}}
  <script src="/js/app.js"></script>
</body>
</html> 
```


